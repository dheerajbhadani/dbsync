# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import db_sync_pb2 as db__sync__pb2


class DbSyncStub(object):
  """Interface exported by the server.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Copy = channel.unary_stream(
        '/dbsync.DbSync/Copy',
        request_serializer=db__sync__pb2.Source.SerializeToString,
        response_deserializer=db__sync__pb2.ResponseData.FromString,
        )


class DbSyncServicer(object):
  """Interface exported by the server.
  """

  def Copy(self, request, context):
    """A Server-to-client steaming RPC.

    Copies files from source to destination. Results are 
    streamed with defined chuncksize rather than returned at once.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DbSyncServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Copy': grpc.unary_stream_rpc_method_handler(
          servicer.Copy,
          request_deserializer=db__sync__pb2.Source.FromString,
          response_serializer=db__sync__pb2.ResponseData.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'dbsync.DbSync', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
